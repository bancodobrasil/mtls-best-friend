{
  "brought-to-you-by": "Brought to you by ",
  "home-header-tagline": "Instantly test your mTLS <code>server</code> and <code>client</code> while getting some tips on how to easily setup up this mess.",

  "mtls-server-card-description": "Upload an acceptable <strong>client certificate and key</strong> to test your mTLS server with one click from a ready to request online client with code examples.",

  "mtls-client-card-description": "Download a <strong>client certificate and key</strong> to make a quick connection test from your application to a ready to ping mTLS server.",

  "sidecar-proxy-card-description": "Leave the mTLS dirty job away from your API endpoints using this Sidecar Proxy Docker image on in your prefered cluster provider.",

  "ambassador-gateway-card-description": "Need some help making a request to an mTLS server? This Ambassador Docker image got you covered! Make a regular request to it and it will handle the mTLS stuff.",

  "sidecar-header-tag-line": "So, you need to secure an API using mTLS but you don't want to run on all the details of that or mess up your current code and infraestructure? If your answer is \"yes\", then the <strong>Sidecar Proxy</strong> is exactly what you need.",

  "sidecar-a-full-example-to-download": "A full example including server and client certificates to download can be found at <a className=\"ml-1 underline\" href=\"https://github.com/bancodobrasil/api-mtls-sidecar-proxy\"> bancodobrasil/api-mtls-sidecar-proxy </a>",
  "ambassador-a-full-example-to-download": "A full example including server and client certificates to download can be found at <a className=\"ml-1 underline\" href=\"https://github.com/bancodobrasil/api-mtls-ambassador-gateway\"> bancodobrasil/api-mtls-ambassador-gateway </a>",

  "put-your-mTLS-sidecar-to-run": "To put your mTLS Sidecar Proxy to run you will have to get those 3 PEM files:",
  "put-your-mTLS-ambassador-to-run": "To put your mTLS Ambassador Gateway to run you will have to get those 3 PEM files:",

  "server-pem-used-to-make-the-tls": "<strong>server.pem</strong>: used to make the TLS (HTTPS) connection",
  "server-key-pem-also-used": "<strong>server-key.pem</strong>: also used to make the TLS (HTTPS) connection",
  "clients-ca-pem-used-to-verify": "<strong>clients-ca.pem</strong>: used to verify if the client certificates used on the incoming connections are accepted ones",

  "client-pem-used-to-make-the-tls": "<strong>client.pem</strong>: used to make the mTLS connection as client",
  "client-key-pem-also-used": "<strong>client-key.pem</strong>: also used to make the mTLS connection as client",
  "server-ca-pem-used-to-verify": "<strong>server-ca.pem</strong>: if the environment variable PROXY_SSL_VERIFY=on you will have to put this public CA certificate used to sign the destination server for that to be recognized as trusted by the Ambassador",

  "certificate-files-list-description": "The <strong>server-key.pem</strong> and <strong>server.pem</strong> should be from a trustworthy Certification Authority, such as Let's Encrypt, Glogal Sign, Verisign, Digicert and so son. The <strong>clients-ca.pem</strong> must be an intermediate CA (could be self-signed) that was used to sign the client certificates used in mTLS authentication process.",
  "ambassador-certificate-files-list-description": "To start using the ambassador, create a <code>docker-compose.yml</code> file - como no exemplo acima -, set the <code>PROXY_PASS</code> env var to the mTLS endpoint you need to make the request to, create a folder named <strong>certs</strong> and download a valid and authorized client key/certificate to this endpoint inside this folder, mapping the this folder as a volume to <code>/etc/nginx/conf.d/certs</code>.",

  "download-certificate-to-test-local-instructions": "To run locally, create a <code>docker-compose.yml</code> file like the one above, set the <code>PROXY_PASS</code> to a known website address, create a folder named <strong>certs</strong> and download the following certificates to this folder mapping it as volume to the <code>/etc/nginx/conf.d/certs</code> folder.",
  "ambassador-download-trusted-client-certificate-to-test-local-instructions": "If you want to make a quick test with the Ambassador, create a <code>docker-compose.yml</code> file like the one above, set the <code>PROXY_PASS</code> to <strong>https://sidecar.mtls.labbs.com.br</strong>, create a folder named <strong>certs</strong> and download the following files to this folder mapping it as a volume to <code>/etc/nginx/conf.d/certs</code>:",

  "docker-compose-up-instructions": "After downloading the certificate to the <strong>certs</strong> folder, bring the container up:",

  "curl-to-test-instructions": "And then make a curl to check this running:",
  "curl-to-test-certificates": "You could make a <code>curl</code> to test the key and certificates",

  "server-header-tagline": "Are you setting up your server to authenticate with mTLS, but you need some help with a simple client to quickly check whether your server connection configuration is working? Let's do it!",
  "client-header-tagline": "Are you setting up a client to authenticate with mTLS, but you need some help with a simple server to quickly check whether your client connection configuration is working? Check this!",

  "server-upload-instructions": "To test your server, first paste a client <strong>private key</strong> with its respective <strong>certificate</strong> and, optionally, the <strong>CA public key</strong> used to sign the server certificate (if self-signed, for example) and then click the <strong>\"Test now\"</strong> button to send a request to your mTLS server using the provided credentials.",
  "private-key-label-upload": "<strong>Client Key</strong> in Base64 PEM format:",
  "certificate-label-upload": "<strong>Client Certificate</strong> in Base64 PEM format:",
  "ca-label-upload": "(Optional) Public <strong>server CA certificate</strong> in Base64 PEM format to be added as trusted authority in the request:",
  "the-test-steps-are": "The test service does the following checks:",
  "url-to-test": "Your <strong>mTLS server</strong> endpoint URL to test:",
  "attempt-to-make-post-get-request-with-certificate": "POST and GET resquest <strong>with</strong> the provided client certificate. Expected response: <code>200 Success</code> for the allowed method",
  "attempt-to-make-regular-request-without-certificate": "POST and GET request <strong>without</strong> client certificate. Expected response: <code>400 Bad Request</code>",
  "attempt-to-make-post-get-request-with-another-certificate": "POST and GET resquest <strong>with an untrusted</strong> client certificate locally generated. Expected response: <code>400 Bad Request</code>",
  "testing-your-mtls-server": "Testing your mTLS server",

  "sucess-200": "Expected response: <code>200 Success</code>",
  "bad-request-400-no-cert": "Expected response (no cert): <code>400 Bad Request</code>",
  "bad-request-400-invalid-cert": "Expected response (invalid cert): <code>400 Bad Request</code>",

  "test-now": "Test Now",

  "loading": "Loading",

  "contribute-to-mtls-bff-project-at": "Contribute to mTLSBFF project at",
  "check-a-sample-implementation-at": "Check a sample implementation at",
  "get-a-sample-mtls-server-at": "Get a sample mTLS server at",
  "steps-followed-to-the-test-server": "In order to test your client application sending requests to our pre-configured mTLS test server, follow those steps:",
  "download-the-client-key-and-certificate": "Download the <1>client key</1> and the <1>client certificate</1> to use in your client application",
  "download-client-key": "Download the client key",
  "download-client-certificate": "Download the client certificate",
  "download-server-ca-to-add-to-trust": "Download the test server CA to add it as a trusted server certificate",
  "download-server-ca": "Download the test server CA",
  "send-the-request-to-test-server-at": "Send the requests from your client application to",

  "download-server-certificate": "You can download the private key, public certificate and CA certificate through the links below:"
  
}
