{
  "footer.broughtToYouBy": "Brought to you by ",
  "home.headerTagLine": "Instantly test your mTLS <code>server</code> and <code>client</code> while getting some tips on how to easily setup up this mess.",

  "home.mtlsServerCardDescription": "Upload an acceptable <strong>client certificate and key</strong> to test your mTLS server with one click from a ready to request online client with code examples.",

  "home.mtlsClientCardDescription": "Download a <strong>client certificate and key</strong> to make a quick connection test from your application to a ready to ping mTLS server.",

  "home.sidecarProxyCardDescription": "Leave the mTLS dirty job away from your API endpoints using this Sidecar Proxy Docker image, standalone on in your prefered cluster provider.",

  "home.ambassadorGatewayCardDescription": "Need some help making a request to an mTLS server? This Ambassador Docker image got you covered! Make a regular request to it and it will handle the mTLS stuff.",

  "sidecar.headerTagLine": "So, you want to secure an API using mTLS but you don't want to run on all the details of that or mess up your current code and infraestructure? If your answer is \"yes\", then the <strong>Sidecar Proxy</strong> is exactly what you need.",

  "sidecar.aFullExampleToDownload": "A full example including server and client certificates to download can be found at <a className=\"ml-1 underline\" href=\"https://github.com/bancodobrasil/api-mtls-sidecar-proxy\"> bancodobrasil/api-mtls-sidecar-proxy </a>",

  "sidecar.toPutYourmTLSSidecarToRun": "To put your mTLS Sidecar Proxy to run you will have to get those 3 PEM files:",

  "sidecar.1serverPEMUsedToMakeTheTLS": "<strong>server.pem</strong>: used to make the TLS (HTTPS) connection",
  "sidecar.2serverKeyPEMAlsoUsed": "<strong>server-key.pem</strong>: also used to make the TLS (HTTPS) connection",
  "sidecar.3clientsCAPEMUsedToVerify": "<strong>clients-ca.pem</strong>: used to verify if the client certificates used on the incoming connections are accepted ones",

  "sidecar.certificateFilesListDescription": "The server-key.pem and server.pem should be from a trustworthy Certification Authority, such as Let's Encrypt, Glogal Sign, Verisign, Digicert and so son. The clients-ca.pem must be an intermediate CA (could be self generated) that was used to generate the client certificates used in mTLS authentication process.",

  "sidecar.downloadCertificateToTestLocalInstructions": "To run locally, create a <code>docker-compose.yml</code> file like the one above, set the <code>PROXY_PASS</code> to a known website address, create a folder named <strong>certs</strong> and download the following certificates to this folder mapping it as volume to the <code>/etc/nginx/conf.d/certs</code> folder.",

  "sidecar.dockerComposeUpInstructions": "After downloading the certificate to the <strong>certs</strong> folder, bring the container up:",

  "sidecar.curlToTestInstructions": "And then make a curl to check this running:",

  "server.headerTagLine": "Are you setting up your server to authenticate mTLS, but you need some help with a simple client to quickly check whether your server connection configuration is working? Let's do it!",

  "server.uploadInstructionsLine1": "To test your server, first paste a client <strong>private key</strong> with its respective <strong>certificate</strong> and the <strong>CA public key</strong> you used to sign this client certificate and then click the <strong>\"Test now!\"</strong> button to send a test request to your mTLS server using the provided certificate to authenticate.",
  "server.privateKeyLabelUpload": "<strong>Client Key</strong> in Base64 PEM format:",
  "server.certificateLabelUpload": "<strong>Client Certificate</strong> in Base64 PEM format:",
  "server.caLabelUpload": "Public <strong>CA certificate</strong> in Base64 PEM format used to sign the client certificate to be added as trusted authority:",
  "server.theTestStepsAre": "The test service does the following checks:",
  "server.URLToTest": "Your <strong>mTLS server</strong> endpoint URL to test:",
  "server.attemptToMakePOSTGETRequestWithCertificate": "POST and GET resquest <strong>with</strong> the provided client certificate. Expected responde: <code>200 Success</code>",
  "server.attemptToMakeRegularRequestWithoutCertificate": "POST and GET request <strong>without</strong> client certificate. Expected response: <code>400 Bad Request</code>",
  "server.attemptToMakePOSTGETRequestWithAnotherCertificate": "POST and GET resquest <strong>with an untrusted</strong> client certificate locally generated. Expected responde: <code>400 Bad Request</code>",
  "server.TestingYourMTLSServer": "Testing your mTLS server",

  "Test now!": "Test now!"
}
